import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import json
import ollama
import asyncio
from dotenv import load_dotenv
import os
import pytesseract
from PIL import Image
from io import BytesIO
import re
import psycopg2
from datetime import datetime
from sqlalchemy import create_engine

# –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
db_url = "postgresql+psycopg2://dezmoond:3621393258lL@localhost:5432/sechenov"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SQLAlchemy
engine = create_engine(db_url)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.environ.get("TOKEN")
bot = telebot.TeleBot(TOKEN)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_selected_products = {}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ Tesseract OCR (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = InlineKeyboardMarkup()
    install_all = InlineKeyboardButton("–°—á–∏—Ç–∞—Ç—å QR —á–µ–∫–∞", callback_data="read_qr")
    instruction = InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="show_instruction")
    photo_button = InlineKeyboardButton("üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞", callback_data="request_photo")
    nutrition_button = InlineKeyboardButton("üçΩÔ∏è –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç –≤—Ä—É—á–Ω—É—é", callback_data="get_nutrition")
    markup.add(nutrition_button)
    markup.add(install_all)
    markup.add(instruction)
    markup.add(photo_button)

    with open("image/137761-mgmu_imeni_i_m_sechenova.jpg", "rb") as image:
        bot.send_photo(message.chat.id, image)

    bot.send_message(message.chat.id,
                     '''–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≤–∞—à–µ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è! \n\n –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º —Å–∫–∞–Ω–∏—Ä—É—è QR-–∫–æ–¥, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É—è —á–µ–∫ –∏–ª–∏ –≤–≤–æ–¥—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤—Ä—É—á–Ω—É—é. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É. \n\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start''',
                     reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ "–°—á–∏—Ç–∞—Ç—å QR —á–µ–∫–∞" –∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
@bot.callback_query_handler(
    func=lambda call: call.data in ["read_qr", "show_instruction", "request_photo", "get_nutrition"])
def callback_handler(call):
    if call.data == "read_qr":
        read_qr(call.message)
    elif call.data == "show_instruction":
        show_instruction(call.message)
    elif call.data == "request_photo":
        request_photo(call.message)
    elif call.data == "get_nutrition":
        get_nutrition(call.message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_nutrition(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    finish_button = KeyboardButton("üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä—É—á–Ω–æ–π –≤–≤–æ–¥")
    markup.add(finish_button)

    # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    bot.register_next_step_handler(message, process_nutrition_input)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=markup)


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def process_nutrition_input(message):
    if message.text == "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä—É—á–Ω–æ–π –≤–≤–æ–¥":
        bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start.")
        return

    product_name = message.text

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    asyncio.run(send_nutrition_info(message.chat.id, product_name))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    get_nutrition(message)


async def send_nutrition_info(chat_id, product_name):
    nutrition_info = await get_nutrition_facts(product_name)
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
    record_request_to_db(chat_id, product_name, nutrition_info)
    bot.send_message(chat_id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ '{product_name}':\n{nutrition_info}")


def record_request_to_db(user_id, product_name, nutrition_info):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    request_time = datetime.now()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å
    with engine.connect() as connection:
        query = """
        INSERT INTO nutrition_requests (user_id, product_name, nutrition_info, request_time)
        VALUES (%s, %s, %s, %s)
        """
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        connection.execute(query, (user_id, product_name, nutrition_info, request_time))


def request_photo(message):
    bot.send_message(message.chat.id,
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —á–µ–∫–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É —Å–∫—Ä–µ–ø–∫–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª.")


def read_qr(message):
    markup = InlineKeyboardMarkup()
    install_button = InlineKeyboardButton("–î–ª—è Android",
                                          url="https://play.google.com/store/apps/details?id=ru.fns.billchecker")
    install_ios_button = InlineKeyboardButton("–î–ª—è iPhone", url="https://apps.apple.com/ru/app/id1169353005")
    markup.add(install_button)
    markup.add(install_ios_button)
    bot.send_message(message.chat.id, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –§–ù–° –†–§:", reply_markup=markup)


def show_instruction(message):
    markup = InlineKeyboardMarkup()
    install_all = InlineKeyboardButton("–°—á–∏—Ç–∞—Ç—å QR —á–µ–∫–∞", callback_data="read_qr")
    markup.add(install_all)
    bot.send_message(message.chat.id,
                     '''–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: \n\n –í –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω—è—Ç—å —Å–≤–æ–π —Ä–∞—Ü–∏–æ–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–∞—à–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è. \n\n 1) –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR-–∫–æ–¥ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ —á–µ–∫–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞. –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "–§–ù–° –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞" –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–∫–æ–Ω—Ü–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. \n\n -–∑–∞–ø—É—Å—Ç–∏–≤ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ –Ω–∞ QR-–∫–æ–¥ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ —á–µ–∫–∞. \n - –≤—ã–π–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —á–µ–∫—É. –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–µ–π—Å—Ç–≤–∏—è —Å —á–µ–∫–æ–º"   ''',
                     reply_markup=markup)
    bot.send_photo(message.chat.id, open("image/instr3.PNG", "rb"))
    bot.send_message(message.chat.id,
                     '''–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É. \n - –ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" –∏ —É–∫–∞–∂–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç "JSON" ''')
    bot.send_photo(message.chat.id, open("image/instr1.PNG", "rb"))
    bot.send_photo(message.chat.id, open("image/instr2.PNG", "rb"))
    bot.send_message(message.chat.id,
                     '''- –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ñ–∞–π–ª–æ–º —É–∫–∞–∑–∞–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –∏ –≤—ã–±—Ä–∞–≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. \n\n 2) –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ (–í–ê–ñ–ù–û! –ù–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–ª–∏—á–∏–º—ã) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–§–æ—Ç–æ —á–µ–∫–∞" 3) –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" \n\n –í —Å–ª—É—á–∞–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º —Ä–∞—Ü–∏–æ–Ω–µ.''',
                     reply_markup=markup)


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—â–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Llama
async def get_nutrition_facts(product_name):
    response = ollama.chat(
        model='llama3.2',
        messages=[{'role': 'user', 'content': f'''
            –£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–∏—â–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ '{product_name}' –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. 
            –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:
            {{
              "product": "{product_name}",
              "calories": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π",
              "protein": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤ (–≤ –≥—Ä–∞–º–º–∞—Ö)",
              "fat": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤ (–≤ –≥—Ä–∞–º–º–∞—Ö)",
              "carbohydrates": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ (–≤ –≥—Ä–∞–º–º–∞—Ö)"
            }}
            '''}]
    )
    return response['message']['content']


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    file_info = bot.get_file(message.photo[-1].file_id)
    file = bot.download_file(file_info.file_path)
    image = Image.open(BytesIO(file))
    text = pytesseract.image_to_string(image, lang='rus+eng')

    processed_text = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø0-9\s]', '', text.lower())

    bot.send_message(message.chat.id, f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —á–µ–∫–∞:\n{processed_text}")

    asyncio.run(extract_product_names(message.chat.id, processed_text))


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def extract_product_names(chat_id, text):
    response = ollama.chat(
        model='llama3.2',
        messages=[{'role': 'user', 'content': f'''
            –ò–∑–≤–ª–µ–∫–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —á–µ–∫–∞ —É—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–≥—É—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤: \n\n {text}
            –í–µ—Ä–Ω–∏—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –∫–∞–∫ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫:
            []'''}]
    )

    products = json.loads(response['message']['content'])

    if isinstance(products, list):
        user_selected_products[chat_id] = products  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await handle_product_selection(chat_id, products)
    else:
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def handle_product_selection(chat_id, products):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)

    for product in products:
        markup.add(KeyboardButton(product))

    markup.add(KeyboardButton("üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"))

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
@bot.message_handler(func=lambda message: message.text not in ["üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"])
def product_selected(message):
    product_name = message.text

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    asyncio.run(send_nutrition_info(message.chat.id, product_name))


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
