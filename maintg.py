import telebot
from uuid import uuid4  # –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telebot import TeleBot, types
import torch
import threading
import json
import ollama
import asyncio
from dotenv import load_dotenv
import os
import uuid
from PIL import Image
from io import BytesIO
import pandas as pd
import re
import csv
import base64
import time
import io
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.orm import declarative_base, sessionmaker  # –ò–∑–º–µ–Ω–µ–Ω –∏–º–ø–æ—Ä—Ç
from sqlalchemy.exc import IntegrityError
from datetime import datetime
import pickle
from transformers import PreTrainedTokenizerFast, AutoModelForCausalLM

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
df = pd.read_csv('merged_file.csv', sep=';')

# –°–æ–∑–¥–∞–¥–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
subcategory_to_category = dict(zip(df['Sub'], df['Category Name']))

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print('Using device:', device)
# –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
vectorizer_path = '1eatornotv.pkl'
model_forest = '1eatormotm.pkl'
# –ó–∞–≥—Ä—É–∑–∫–∞ TfidfVectorizer
with open(vectorizer_path, 'rb') as file:
    loaded_vectorizer = pickle.load(file)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
with open(model_forest, 'rb') as file:
    loaded_model = pickle.load(file)
# –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
model_path = "lama"

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∏ –º–æ–¥–µ–ª–∏
tokenizer = PreTrainedTokenizerFast.from_pretrained(model_path)
model = AutoModelForCausalLM.from_pretrained(model_path).to(device)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ pad_token_id –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
print(f"pad_token_id type: {type(model.config.pad_token_id)}")
print(f"pad_token_id value: {model.config.pad_token_id}")

if isinstance(model.config.pad_token_id, list):
    model.config.pad_token_id = model.config.pad_token_id[0]
    print(f"pad_token_id was a list, now set to: {model.config.pad_token_id}")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pad_token_id, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∑–∞–¥–∞–Ω–æ
if model.config.pad_token_id is None:
    model.config.pad_token_id = model.config.eos_token_id[0] if isinstance(model.config.eos_token_id,
                                                                           list) else model.config.eos_token_id
    print(f"pad_token_id was not set, set to eos_token_id: {model.config.pad_token_id}")


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
Base = declarative_base()

engine = create_engine('postgresql://dezmoond:3621393258lL@localhost/sechenov')
Session = sessionmaker(bind=engine)
session = Session()
Base.metadata.create_all(engine)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.environ.get("TOKEN")
bot = telebot.TeleBot(TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Ç–æ–∫–µ–Ω–∞–π–∑–µ—Ä–∞ BERT



# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_selected_products = {}

class NutritionRequest(Base):
    __tablename__ = 'nutrition_requests'

    id = Column(Integer, primary_key=True)
    user_id = Column(String)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∞—Ç–∞
    product = Column(String)
    calories = Column(String)
    protein = Column(String)
    fat = Column(String)
    carbohydrates = Column(String)
    request_time = Column(DateTime, default=datetime.utcnow)
    category = Column(String)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def record_nutrition_request(user_id, product, category):
    session = Session()
    new_request = NutritionRequest(
        user_id=user_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        product=product,
        calories=0,
        protein=0,
        fat=0,
        carbohydrates=0,
        category=category
    )
    session.add(new_request)
    session.commit()
    session.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    # Inline-–∫–Ω–æ–ø–∫–∏
    inline_markup = InlineKeyboardMarkup()
    install_all = InlineKeyboardButton("–°—á–∏—Ç–∞—Ç—å QR —á–µ–∫–∞", callback_data="read_qr")
    instruction = InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="show_instruction")
    photo_button = InlineKeyboardButton("üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞", callback_data="request_photo")
    nutrition_button = InlineKeyboardButton("üçΩÔ∏è –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç –≤—Ä—É—á–Ω—É—é", callback_data="get_nutrition")
    inline_markup.add(nutrition_button)
    inline_markup.add(install_all)
    inline_markup.add(instruction)
    inline_markup.add(photo_button)

    # Reply-–∫–Ω–æ–ø–∫–∏
    reply_markup = ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å")
    reply_markup.add(start_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    with open("image/137761-mgmu_imeni_i_m_sechenova.jpg", "rb") as image:
        bot.send_photo(message.chat.id, image)

    bot.send_message(
        message.chat.id,
        '''–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≤–∞—à–µ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è! \n\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º: —Å–∫–∞–Ω–∏—Ä—É—è QR-–∫–æ–¥, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É—è —á–µ–∫ –∏–ª–∏ –≤–≤–æ–¥—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤—Ä—É—á–Ω—É—é. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É. \n\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start.''',
        reply_markup=inline_markup  # Inline-–∫–Ω–æ–ø–∫–∏
    )
    bot.send_message(
        message.chat.id,
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=reply_markup  # Reply-–∫–Ω–æ–ø–∫–∞ "üîÑ –ù–∞—á–∞—Ç—å"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üîÑ –ù–∞—á–∞—Ç—å"
@bot.message_handler(func=lambda message: message.text == "üîÑ –ù–∞—á–∞—Ç—å")
def restart_from_button(message):
    start(message)

@bot.callback_query_handler(func=lambda call: call.data in ["read_qr", "show_instruction", "request_photo", "get_nutrition"])
def callback_handler(call):
    if call.data == "read_qr":
        read_qr(call.message)
    elif call.data == "show_instruction":
        show_instruction(call.message)
    elif call.data == "request_photo":
        request_photo(call.message)
    elif call.data == "get_nutrition":
        get_nutrition(call.message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é
def get_nutrition(message):
    # –ó–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä—É—á–Ω–æ–π –≤–≤–æ–¥"
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    finish_button = KeyboardButton("üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä—É—á–Ω–æ–π –≤–≤–æ–¥")
    markup.add(finish_button)

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, process_nutrition_input)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
def process_nutrition_input(message):
    if message.text == "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä—É—á–Ω–æ–π –≤–≤–æ–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É "üîÑ –ù–∞—á–∞—Ç—å"
        start_markup = ReplyKeyboardMarkup(resize_keyboard=True)
        start_button = KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å")
        start_markup.add(start_button)

        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start.",
            reply_markup=start_markup
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
    if not message.text or message.text.strip() == "":
        bot.send_message(message.chat.id, "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.")
        get_nutrition(message)
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
    product_name = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    try:
        asyncio.run(send_nutrition_info(message.chat.id, product_name, message.from_user.id))
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

    # –°–Ω–æ–≤–∞ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥
    get_nutrition(message)



async def send_nutrition_info(chat_id, product_name, user_id):
    nutrition_info = await get_nutrition_facts(product_name, user_id)
    category_name = subcategory_to_category.get(nutrition_info[0], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    bot.send_message(chat_id, f"–†—É—á–Ω–æ–π –≤–≤–æ–¥ '{product_name}':\n{category_name}")
    record_nutrition_request(chat_id, product_name, category_name)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
@bot.message_handler(commands=['start_manual'])
def start_manual(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å")
    markup.add(start_button)
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã /start.", reply_markup=markup)

def request_photo(message):
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —á–µ–∫–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É —Å–∫—Ä–µ–ø–∫–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª.")


def read_qr(message):
    markup = InlineKeyboardMarkup()
    install_button = InlineKeyboardButton("–î–ª—è Android", url="https://play.google.com/store/apps/details?id=ru.fns.billchecker")
    install_ios_button = InlineKeyboardButton("–î–ª—è iPhone", url="https://apps.apple.com/ru/app/id1169353005")
    markup.add(install_button)
    markup.add(install_ios_button)
    bot.send_message(message.chat.id, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –§–ù–° –†–§:", reply_markup=markup)

def show_instruction(message):
    markup = InlineKeyboardMarkup()
    install_all = InlineKeyboardButton("–°—á–∏—Ç–∞—Ç—å QR —á–µ–∫–∞", callback_data="read_qr")
    markup.add(install_all)
    bot.send_message(message.chat.id, '''–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: \n\n –í –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω—è—Ç—å —Å–≤–æ–π —Ä–∞—Ü–∏–æ–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–∞—à–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è. \n\n 1) –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR-–∫–æ–¥ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ —á–µ–∫–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞. –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "–§–ù–° –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞" –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–∫–æ–Ω—Ü–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. \n\n -–∑–∞–ø—É—Å—Ç–∏–≤ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ –Ω–∞ QR-–∫–æ–¥ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ —á–µ–∫–∞. \n - –≤—ã–π–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —á–µ–∫—É. –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–µ–π—Å—Ç–≤–∏—è —Å —á–µ–∫–æ–º"   ''', reply_markup=markup)
    bot.send_photo(message.chat.id, open("image/instr3.PNG", "rb"))
    bot.send_message(message.chat.id, '''–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É. \n - –ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" –∏ —É–∫–∞–∂–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç "JSON" ''')
    bot.send_photo(message.chat.id, open("image/instr1.PNG", "rb"))
    bot.send_photo(message.chat.id, open("image/instr2.PNG", "rb"))
    bot.send_message(message.chat.id, '''- –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ñ–∞–π–ª–æ–º —É–∫–∞–∑–∞–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –∏ –≤—ã–±—Ä–∞–≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. \n\n 2) –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ (–í–ê–ñ–ù–û! –ù–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–ª–∏—á–∏–º—ã) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–§–æ—Ç–æ —á–µ–∫–∞" 3) –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" \n\n –í —Å–ª—É—á–∞–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º —Ä–∞—Ü–∏–æ–Ω–µ.''', reply_markup=markup)


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—â–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Llama
async def get_nutrition_facts(product_name, user_id):
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –≤–µ–∫—Ç–æ—Ä
    user_vector = loaded_vectorizer.transform([product_name])

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    predicted_category = loaded_model.predict(user_vector)[0]
    print('predicted_category',type(predicted_category))
    if predicted_category == '0':
        system_prompt = (
            '–í—ã —Ç–æ—Ä–≥–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç, –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∏–π —Ç–æ–≤–∞—Ä—ã –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª—è–π –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∑–∞—á–∞—Å—Ç—É—é –ø–æ–¥—Å–∫–∞–∑–∫–∞  –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –û—Ç–≤–µ—á–∞–µ—Ç–µ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É: supercategory: <super>; middlecategory: <middle>; subcategory: <sub>.'
        )
        prompt = f"{system_prompt}\n–í–æ–ø—Ä–æ—Å: {product_name}\n–û—Ç–≤–µ—Ç:"
        inputs = tokenizer(prompt, return_tensors="pt").to(device)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        output = model.generate(
            **inputs,
            max_length=500,
            num_return_sequences=1,
            do_sample=True,
            top_p=0.05,
            temperature=0.1,
            top_k=10,
            pad_token_id=model.config.pad_token_id
        )

        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        response_text = tokenizer.decode(output[0], skip_special_tokens=True)

        # –û–±—Ä–µ–∑–∫–∞ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –¥–æ Super)
        response_text = re.sub(r'.*Super:', 'Super:', response_text).strip()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è supercategory, middlecategory –∏ subcategory
        supercategory_value = extract_values_after_keyword(response_text, "Super")
        middlecategory_value = extract_values_after_keyword(response_text, "Middle")
        subcategory_value = extract_values_after_keyword(response_text, "Sub")


        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è subcategory –∏ middlecategory
        if subcategory_value == middlecategory_value:
            subcategory_value = middlecategory_value
        elif middlecategory_value and subcategory_value and subcategory_value.startswith(middlecategory_value):
            pass  # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        print(subcategory_value, user_id)
    else:
        print('–Ω–µ—Å—ä–µ–¥–æ–±–Ω–æ–µ', user_id)
        subcategory_value = '16_1_1'
    print(subcategory_value, user_id)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    return subcategory_value, user_id

def extract_values_after_keyword(response_text, keyword):
    pattern = rf"{keyword}:\s*([\w\s_]+)"
    matches = re.findall(pattern, response_text)
    return matches[0] if matches else None
def extract_numeric_value(line):
    match = re.search(r'([-+]?\d*\.\d+|\d+)', line)
    if match:
        try:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ float
            return float(match.group(0))
        except ValueError:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ float –¥–ª—è —Å—Ç—Ä–æ–∫–∏: {line}")
            return 0.0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0.0 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ: {line}")
    return 0.0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0.0, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ


# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∏ UUID —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
user_selected_products_images = {}
user_selected_products_json = {}

max_buttons = 50


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
def image_to_base64(image, format="JPEG"):
    buffered = BytesIO()
    image.save(buffered, format=format)
    img_bytes = buffered.getvalue()
    img_base64 = base64.b64encode(img_bytes).decode('utf-8')
    return img_base64


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    file_info = bot.get_file(message.photo[-1].file_id)
    file = bot.download_file(file_info.file_path)
    image = Image.open(BytesIO(file))
    base64_image = image_to_base64(image)
    asyncio.run(extract_product_names(message.chat.id, base64_image, source='image'))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ JSON
@bot.message_handler(content_types=['document'])
def handle_document(message):
    file_id = message.document.file_id
    file_info = bot.get_file(file_id)
    file = bot.download_file(file_info.file_path)

    try:
        data = json.loads(file.decode('utf-8'))
        names = []
        find_names(data, names)
        if not names:
            bot.send_message(message.chat.id, "–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ —Å –∫–ª—é—á–æ–º 'name'.")
            return
        send_product_selection(message.chat.id, names, source='json')
    except json.JSONDecodeError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON-—Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç.")


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def extract_product_names(chat_id, base64_image, source):
    response = ollama.chat(
        model="llama3.2-vision", #llama3.2-vision:11b –∏–ª–∏ llama3.2-vision:90b
        messages=[{
            "role": "user",
            "content": "–ù–µ –ø–∏—à–∏ –ª–∏—à–Ω–µ–≥–æ, —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤. This image is a sales receipt. The output should be in this format - <Product name> list without numbering.",
            "images": [base64_image]
        }]
    )

    content = response['message']['content']
    cleaned_content = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø0-9\s\n,]', '', content)
    product_list = [product.strip() for product in cleaned_content.split('\n') if product.strip()]

    if not product_list:
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    if source == 'image':
        send_product_selection(chat_id, product_list, source)
    else:
        send_product_selection2(chat_id, product_list)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å UUID –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def send_product_selection(chat_id, product_list, source):
    markup = types.InlineKeyboardMarkup(row_width=1)

    if source == 'image':
        user_selected_products_images[chat_id] = {}
    else:
        user_selected_products_json[chat_id] = {}

    for product in product_list:
        product_uuid = str(uuid.uuid4())

        if source == 'image':
            user_selected_products_images[chat_id][product_uuid] = product
        else:
            user_selected_products_json[chat_id][product_uuid] = product

        button = types.InlineKeyboardButton(text=product, callback_data=product_uuid)
        markup.add(button)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞
def send_product_selection2(chat_id, product_list):
    markup = types.InlineKeyboardMarkup(row_width=1)

    for product in product_list:
        callback_data = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø0-9_]', '_', product[:64])
        button = types.InlineKeyboardButton(text=product, callback_data=callback_data)
        markup.add(button)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=markup)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
async def handle_product_selection_async(call):
    product_uuid = call.data

    if product_uuid in user_selected_products_images.get(call.message.chat.id, {}):
        product_name = user_selected_products_images[call.message.chat.id].get(product_uuid, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        product_name = user_selected_products_json.get(call.message.chat.id, {}).get(product_uuid, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
    subcategory_value, user_id = await get_nutrition_facts(product_name, call.message.chat.id)

    # –ó–∞–º–µ–Ω—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_name = subcategory_to_category.get(subcategory_value, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product_name}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}")
    record_nutrition_request(user_id, product_name, category_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞
@bot.callback_query_handler(func=lambda call: True)
def handle_product_selection(call):
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    thread = threading.Thread(target=asyncio.run, args=(handle_product_selection_async(call),))
    thread.start()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ JSON
def find_names(data, names):
    if isinstance(data, list):
        for item in data:
            find_names(item, names)
    elif isinstance(data, dict):
        for key, value in data.items():
            if key == 'name':
                names.append(value)
            else:
                find_names(value, names)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def start_polling():
    while True:
        try:
            bot.polling(none_stop=True, timeout=20, long_polling_timeout=20)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            time.sleep(5)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

if __name__ == '__main__':
    start_polling()
